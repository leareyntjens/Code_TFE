import osimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as snsfrom matplotlib.lines import Line2Ddef convert_to_csv(run_folder, base_path, num_runs, file_name):    for run in range(num_runs):        txt_path = os.path.join(base_path, run_folder, f'Run_{run}', 'output', file_name)        csv_path = txt_path.replace('.txt', '.csv')        if not os.path.exists(txt_path):            continue        try:            df = pd.read_csv(txt_path, sep=None, engine='python', skiprows=[1])            df.columns = df.columns.str.strip()            df.to_csv(csv_path, index=False)        except Exception:            continuedef read_column_by_key(run_folder, base_path, num_runs, file_name, column_name, key_column):    data_by_key = {}    for run in range(num_runs):        csv_path = os.path.join(base_path, run_folder, f'Run_{run}', 'output', file_name.replace('.txt', '.csv'))        if not os.path.exists(csv_path):            continue        try:            df = pd.read_csv(csv_path)            df.columns = df.columns.str.strip()        except Exception:            continue        if key_column not in df.columns or column_name not in df.columns:            continue        for _, row in df.iterrows():            key = row[key_column]            value = row[column_name]            if key not in data_by_key:                data_by_key[key] = []            data_by_key[key].append(value)    return data_by_keydef plot_box_plots_with_run_0_highlight(data_by_key, column_name, group_size=10, specific_keys=None, legend_label="Run_0"):    filtered_data = {key: values for key, values in data_by_key.items() if key in specific_keys}    if not filtered_data:        return    keys, values = [], []    for key, vals in filtered_data.items():        keys.extend([key] * len(vals))        values.extend(vals)    plot_data = pd.DataFrame({column_name: values, 'Key': keys})    run_0_values = {key: values[0] if len(values) > 0 else None for key, values in filtered_data.items()}    unique_keys = plot_data['Key'].unique()    num_groups = (len(unique_keys) + group_size - 1) // group_size    for i in range(num_groups):        start, end = i * group_size, (i + 1) * group_size        group_keys = unique_keys[start:end]        group_plot_data = plot_data[plot_data['Key'].isin(group_keys)]        plt.figure(figsize=(12, 6))        sns.boxplot(data=group_plot_data, x='Key', y=column_name, showfliers=False, palette='Set2')        for key in group_keys:            if key in run_0_values and run_0_values[key] is not None:                plt.scatter([key], [run_0_values[key]], color='red', edgecolor='black', s=100, marker='X', zorder=5)        if i == 0:            custom_legend = [Line2D([0], [0], marker='X', color='red', label=legend_label, markersize=10, markeredgecolor='black', linestyle='None')]            plt.legend(handles=custom_legend, loc='upper right', fontsize='small')        plt.ylabel(column_name)        plt.xticks(rotation=45)        plt.tight_layout()        plt.show()# Param√®tres principauxbase_path = 'C:/Users/reynt/LMECA2675/EnergyScope-EnergyScope.py/case_studies/Analyse Stochastique'run_folder = 'SA_gwp_constr_75%'num_runs = 52file_name = 'assets.txt'column_name = 'f'key_column = 'TECHNOLOGIES'# Lancementconvert_to_csv(run_folder, base_path, num_runs, file_name)data_by_key = read_column_by_key(run_folder, base_path, num_runs, file_name, column_name, key_column)# Groupes de technologiesgroupes = {    "techno_centrale": ["PV", "WIND_ONSHORE", "WIND_OFFSHORE","NUCLEAR", "CCGT", "CCGT_AMMONIA", "COAL_US", "COAL_IGCC",  "HYDRO_RIVER", "GEOTHERMAL", "H2_ELECTROLYSIS"],    "IND": ["IND_COGEN_GAS", "IND_COGEN_WOOD", "IND_COGEN_WASTE", "IND_DIRECT_ELEC", "IND_BOILER_GAS", "IND_BOILER_WOOD", "IND_BOILER_OIL", "IND_BOILER_COAL", "IND_BOILER_WASTE"],    "DEC": ["DEC_HP_ELEC", "DEC_THHP_GAS", "DEC_COGEN_GAS", "DEC_COGEN_OIL", "DEC_ADVCOGEN_GAS", "DEC_ADVCOGEN_H2", "DEC_BOILER_GAS", "DEC_BOILER_WOOD", "DEC_BOILER_OIL", "DEC_SOLAR", "DEC_DIRECT_ELEC"],    "DHN": ["DHN_HP_ELEC", "DHN_COGEN_GAS", "DHN_COGEN_WOOD", "DHN_COGEN_WASTE", "DHN_COGEN_WET_BIOMASS", "DHN_COGEN_BIO_HYDROLYSIS", "DHN_BOILER_GAS", "DHN_BOILER_WOOD", "DHN_BOILER_OIL", "DHN_DEEP_GEO", "DHN_SOLAR"],    "techno_stockage": ["BATT_LI", "PHEV_BATT", "PHS", "TS_DEC_DIRECT_ELEC", "TS_DEC_THHP_GAS", "TS_DEC_COGEN_GAS", "TS_DEC_COGEN_OIL", "TS_DEC_ADVCOGEN_GAS", "TS_DEC_ADVCOGEN_H2", "TS_DEC_BOILER_GAS", "TS_DEC_BOILER_WOOD", "TS_DEC_BOILER_OIL", "TS_DHN_DAILY", "H2_STORAGE", "DIESEL_STORAGE", "GASOLINE_STORAGE", "LFO_STORAGE", "AMMONIA_STORAGE", "METHANOL_STORAGE", "GAS_STORAGE", "TS_DHN_SEASONAL", "TS_HIGH_TEMP", "TS_DEC_HP_ELEC", "BEV_BATT", "CO2_STORAGE"],    "techno_mob_pub": ["TRAMWAY_TROLLEY", "BUS_COACH_DIESEL", "BUS_COACH_HYDIESEL", "BUS_COACH_CNG_STOICH", "BUS_COACH_FC_HYBRIDH2", "TRAIN_PUB"],    "techno_mob_priv": ["CAR_GASOLINE", "CAR_DIESEL", "CAR_NG", "CAR_METHANOL", "CAR_HEV", "CAR_PHEV", "CAR_BEV", "CAR_FUEL_CELL"],    "techno_mob_freight": ["TRAIN_FREIGHT", "BOAT_FREIGHT_DIESEL", "BOAT_FREIGHT_NG", "BOAT_FREIGHT_METHANOL", "TRUCK_DIESEL", "TRUCK_METHANOL", "TRUCK_FUEL_CELL", "TRUCK_ELEC", "TRUCK_NG"],    "techno_Synthetic_fuels": ["HABER_BOSCH", "SYN_METHANOLATION", "METHANE_TO_METHANOL", "BIOMASS_TO_METHANOL", "OIL_TO_HVC", "GAS_TO_HVC", "BIOMASS_TO_HVC", "METHANOL_TO_HVC", "SMR", "H2_BIOMASS", "GASIFICATION_SNG", "SYN_METHANATION", "BIOMETHANATION", "BIO_HYDROLYSIS", "PYROLYSIS_TO_LFO", "PYROLYSIS_TO_FUELS", "ATM_CCS", "INDUSTRY_CCS", "AMMONIA_TO_H2"]}#"PV", "WIND_ONSHORE", "WIND_OFFSHORE",# Tracer les graphiquesfor group_name, key_list in groupes.items():    print(f"--- Plotting: {group_name} ---")    plot_box_plots_with_run_0_highlight(data_by_key, column_name, group_size=15, specific_keys=sorted(key_list))